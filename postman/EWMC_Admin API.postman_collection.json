{
	"info": {
		"_postman_id": "34a36058-385a-4942-8339-2ecdf683b48e",
		"name": "EWMC_Admin API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25439441"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "Validation",
					"item": [
						{
							"name": "Unrequired query params",
							"item": [
								{
									"name": "Поиск пользователей без нескольких Query params",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let compilation;\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        pm.collectionVariables.set(\"uid\", user.id)\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/users?ids={{uid}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{uid}}",
													"description": "id пользователей"
												},
												{
													"key": "from",
													"value": "0",
													"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
													"disabled": true
												},
												{
													"key": "size",
													"value": "10",
													"description": "количество элементов в наборе",
													"disabled": true
												},
												{
													"key": "Authorization",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Поиск пользователей без параметра ids",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let compilation;\r",
													"    try {\r",
													"        let user1 = rnd.getUser();\r",
													"        user1 = await api.addUser(user1);\r",
													"\r",
													"        let user2 = rnd.getUser()\r",
													"        user2 = await api.addUser(user2);\r",
													"        pm.collectionVariables.set('fromId',1);\r",
													"        pm.collectionVariables.set('source1', user1);\r",
													"        pm.collectionVariables.set('source2', user2);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/users?ids={{uid}}&from={{fromId}}&size=100000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{uid}}",
													"description": "id пользователей"
												},
												{
													"key": "from",
													"value": "{{fromId}}",
													"description": "количество элементов, которые нужно пропустить для формирования текущего набора"
												},
												{
													"key": "size",
													"value": "100000",
													"description": "количество элементов в наборе"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Required params in body",
							"item": [
								{
									"name": "Добавление пользователя с электронной почтой, состоящей только из пробелов",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.email = \"    \";\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя с пустой электронной почтой",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.email = \"\";\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя без поля email",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        delete user.email;\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя с пустым именем",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.name = \"\";\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя с именем, состоящим только из пробелов",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.name = \"   \";\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя без поля name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        delete user.name;\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "String length restrictions",
							"item": [
								{
									"name": "Добавление пользователя с name.length < 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.name = rnd.getWord(1);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя с name.length == 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.name = rnd.getWord(2);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя с name.length > 250",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.name = rnd.getWord(251);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя с name.length == 250",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.name = rnd.getWord(250);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя с email.length < 6",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.email = rnd.getWord(1) + '@a.r';\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя с email.length == 6",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.email = rnd.getWord(1) + '@a.ru';\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя с email.localpart.length > 64",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.email = rnd.getWord(65) + '@a.ru';\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя с email.localpart.length == 64",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.email = rnd.getWord(59) + '@a.ru';\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя с domain.part.length > 63",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.email = rnd.getWord(1) + '@' + rnd.getWord(64) + '.ru';\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя с domain.part.length == 63",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.email = rnd.getWord(1) + '@' + rnd.getWord(60) + '.ru';\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя с email.length > 254",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.email = rnd.getWord(1) + '@' + rnd.getWord(63) + '.' + rnd.getWord(63) + '.' + rnd.getWord(63) + '.' + rnd.getWord(61);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление пользователя с email.length == 254",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user;\r",
													"    try {\r",
													"        user = rnd.getUser();\r",
													"        user.email = rnd.getWord(1) + '@' + rnd.getWord(63) + '.' + rnd.getWord(63) + '.' + rnd.getWord(63) + '.' + rnd.getWord(60);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(user),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Default values check",
							"item": [
								{
									"name": "Проверка на значения по-умолчанию from и size(user)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        for (let i = 0; i < 11; i++){\r",
													"            await api.addUser(rnd.getUser());\r",
													"        }\r",
													"        pm.sendRequest({\r",
													"            url : pm.collectionVariables.get(\"baseUrl\")+\"/admin/users?from=0\",\r",
													"            method : \"GET\",\r",
													"            header: { \"Content-Type\": \"application/json\", \"Authorization\":\"Bearer \"+pm.collectionVariables.get(\"token\") }\r",
													"        }, (error, response) => {pm.collectionVariables.set('source', response.json())});\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const source = pm.collectionVariables.get('source');\r",
													"\r",
													"pm.test(\"Значение from по-умолчанию должно быть равным 0\", function () {\r",
													"    pm.expect(target[0].id).to.be.equal(source[0].id, 'Запросы с from=0 и без него должны начинаться с одного и того же события');\r",
													"});\r",
													"\r",
													"pm.test(\"Значение size по-умолчанию должно быть равным 10\", function () {\r",
													"    pm.expect(target.length).to.be.equal(10);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{uid}}",
													"description": "id пользователей",
													"disabled": true
												},
												{
													"key": "ids",
													"value": "-10833646",
													"description": "id пользователей",
													"disabled": true
												},
												{
													"key": "from",
													"value": "0",
													"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
													"disabled": true
												},
												{
													"key": "size",
													"value": "10",
													"description": "количество элементов в наборе",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "409",
					"item": [
						{
							"name": "Добавление пользователя с занятым именем",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let user;\r",
											"    try {\r",
											"        user = rnd.getUser();\r",
											"        await api.addUser(user);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(user),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление пользователя , когда он отсутствует",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const foundedUser = await api.findUser(user.id);\r",
											"        pm.collectionVariables.set(\"uid\", user.id);\r",
											"        pm.collectionVariables.set(\"response\", foundedUser)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const userId = pm.collectionVariables.get('uid');\r",
											"\r",
											"pm.test(\"Пользователь должен быть найден до выполнения запроса\", function(){\r",
											"    pm.expect(source.length).to.eql(1);\r",
											"    pm.expect(source[0].id).to.eql(userId);\r",
											"});\r",
											"let body\r",
											"const req = {\r",
											"                url:pm.collectionVariables.get(\"baseUrl\")+ \"/admin/users?ids=\" + pm.collectionVariables.get(\"uid\"),\r",
											"                method: \"GET\",\r",
											"                body: body == null ? \"\" : JSON.stringify(body),\r",
											"                header: { \"Content-Type\": \"application/json\" ,  \"Authorization\":\"Bearer \"+pm.collectionVariables.get(\"token\") },\r",
											"            };\r",
											"pm.sendRequest(req, (error, response) => {\r",
											"    pm.test(\"Пользователь должен быть удалён после выполнения запроса\", function(){\r",
											"        pm.expect(response.json().length).to.eql(0);\r",
											"    });\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/users/{{uid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"users",
										"{{uid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление нового пользователя Oauth2 с такимиже данными",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"user\",\r\n    \"email\":\"user@user.ru\",\r\n    \"passsword\":\"afdfadg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin Oauth2",
					"item": [
						{
							"name": "Добавление нового пользователя Oauth2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let user;\r",
											"    try {\r",
											"        user = rnd.getUser();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(user),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('userName');\r",
											"pm.expect(target).to.have.property('email');\r",
											"});\r",
											"\r",
											"console.clear\r",
											"console.log(target)\r",
											"console.log(source)\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(source.name).equal(target.userName, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const userId = pm.collectionVariables.get('uid');\r",
											"\r",
											"pm.test(\"Пользователь должен быть найден до выполнения запроса\", function(){\r",
											"    pm.expect(source.length).to.eql(1);\r",
											"    pm.expect(source[0].id).to.eql(userId);\r",
											"});\r",
											"let body\r",
											"const req = {\r",
											"                url:pm.collectionVariables.get(\"baseUrl\")+ \"/admin/users?ids=\" + pm.collectionVariables.get(\"uid\"),\r",
											"                method: \"GET\",\r",
											"                body: body == null ? \"\" : JSON.stringify(body),\r",
											"                header: { \"Content-Type\": \"application/json\" ,  \"Authorization\":\"Bearer \"+pm.collectionVariables.get(\"token\")},\r",
											"            };\r",
											"pm.sendRequest(req, (error, response) => {\r",
											"    pm.test(\"Пользователь должен быть удалён после выполнения запроса\", function(){\r",
											"        pm.expect(response.json().length).to.eql(0);\r",
											"    });\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const foundedUser = await api.findUser(user.id);\r",
											"        pm.collectionVariables.set(\"uid\", user.id);\r",
											"        pm.collectionVariables.set(\"response\", foundedUser)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск пользователей",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('userName');\r",
											"    pm.expect(target[0]).to.have.property('email');\r",
											"});\r",
											"\r",
											"pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
											"    pm.expect(target.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target[0].id).equal(pm.collectionVariables.get(\"uid\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/users?ids={{uid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"users"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{uid}}",
											"description": "id пользователей"
										},
										{
											"key": "ids",
											"value": "-10833646",
											"description": "id пользователей",
											"disabled": true
										},
										{
											"key": "from",
											"value": "0",
											"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
											"disabled": true
										},
										{
											"key": "size",
											"value": "10",
											"description": "количество элементов в наборе",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Event",
			"item": [
				{
					"name": "admin",
					"item": [
						{
							"name": "Поиск событий",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        //const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.request.removeQueryParams(['users', 'categories']);\r",
											"        pm.request.addQueryParams(['categories=' + category.id]);\r",
											"        pm.collectionVariables.set('response', event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('views');\r",
											"pm.expect(target).to.have.property('confirmedRequests');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('publishedOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/events?users=0&states=PUBLISHED&categories=0&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events"
									],
									"query": [
										{
											"key": "users",
											"value": "0",
											"description": "список id пользователей, чьи события нужно найти"
										},
										{
											"key": "states",
											"value": "PUBLISHED",
											"description": "список состояний в которых находятся искомые события"
										},
										{
											"key": "categories",
											"value": "0",
											"description": "список id категорий в которых будет вестись поиск"
										},
										{
											"key": "rangeStart",
											"value": "2022-01-06%2013%3A30%3A38",
											"description": "дата и время не раньше которых должно произойти событие"
										},
										{
											"key": "rangeEnd",
											"value": "2097-09-06%2013%3A30%3A38",
											"description": "дата и время не позже которых должно произойти событие"
										},
										{
											"key": "from",
											"value": "0",
											"description": "количество событий, которые нужно пропустить для формирования текущего набора"
										},
										{
											"key": "size",
											"value": "1000",
											"description": "количество событий в наборе"
										}
									]
								},
								"description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
							},
							"response": []
						}
					]
				},
				{
					"name": "Validation",
					"item": [
						{
							"name": "Unrequired query params",
							"item": [
								{
									"name": "Поиск событий без нескольких Query params",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        event = await api.publishEvent(event.id);\r",
													"        pm.request.removeQueryParams(['users', 'categories']);\r",
													"        pm.request.addQueryParams([`users=` + user.id, 'categories=' + category.id]);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "0",
													"description": "список id пользователей, чьи события нужно найти",
													"disabled": true
												},
												{
													"key": "states",
													"value": "PUBLISHED",
													"description": "список состояний в которых находятся искомые события",
													"disabled": true
												},
												{
													"key": "categories",
													"value": "0",
													"description": "список id категорий в которых будет вестись поиск",
													"disabled": true
												},
												{
													"key": "rangeStart",
													"value": "2022-01-06%2013%3A30%3A38",
													"description": "дата и время не раньше которых должно произойти событие",
													"disabled": true
												},
												{
													"key": "rangeEnd",
													"value": "2097-09-06%2013%3A30%3A38",
													"description": "дата и время не позже которых должно произойти событие",
													"disabled": true
												},
												{
													"key": "from",
													"value": "0",
													"description": "количество событий, которые нужно пропустить для формирования текущего набора",
													"disabled": true
												},
												{
													"key": "size",
													"value": "1000",
													"description": "количество событий в наборе",
													"disabled": true
												}
											]
										},
										"description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
									},
									"response": []
								}
							]
						},
						{
							"name": "Misc tests",
							"item": [
								{
									"name": "Поиск событий с проверкой параметров",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"       // const user = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent(rnd.getEvent(category.id));\r",
													"        event = await api.publishEvent(event.id);\r",
													"        pm.request.removeQueryParams(['users', 'categories']);\r",
													"        pm.request.addQueryParams(['categories=' + category.id]);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const source = pm.collectionVariables.get('response');\r",
													"const target = pm.response.json()[0];\r",
													"\r",
													"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
													"pm.expect(target).to.have.property('id');\r",
													"pm.expect(target).to.have.property('title');\r",
													"pm.expect(target).to.have.property('annotation');\r",
													"pm.expect(target).to.have.property('category');\r",
													"pm.expect(target).to.have.property('paid');\r",
													"pm.expect(target).to.have.property('eventDate');\r",
													"pm.expect(target).to.have.property('initiator');\r",
													"pm.expect(target).to.have.property('views');\r",
													"pm.expect(target).to.have.property('confirmedRequests');\r",
													"pm.expect(target).to.have.property('description');\r",
													"pm.expect(target).to.have.property('participantLimit');\r",
													"pm.expect(target).to.have.property('state');\r",
													"pm.expect(target).to.have.property('createdOn');\r",
													"pm.expect(target).to.have.property('publishedOn');\r",
													"pm.expect(target).to.have.property('location');\r",
													"pm.expect(target).to.have.property('requestModeration');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/events?users=0&states=PUBLISHED&categories=0&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "0",
													"description": "список id пользователей, чьи события нужно найти"
												},
												{
													"key": "states",
													"value": "PUBLISHED",
													"description": "список состояний в которых находятся искомые события"
												},
												{
													"key": "categories",
													"value": "0",
													"description": "список id категорий в которых будет вестись поиск"
												},
												{
													"key": "rangeStart",
													"value": "2022-01-06%2013%3A30%3A38",
													"description": "дата и время не раньше которых должно произойти событие"
												},
												{
													"key": "rangeEnd",
													"value": "2097-09-06%2013%3A30%3A38",
													"description": "дата и время не позже которых должно произойти событие"
												},
												{
													"key": "from",
													"value": "0",
													"description": "количество событий, которые нужно пропустить для формирования текущего набора"
												},
												{
													"key": "size",
													"value": "1000",
													"description": "количество событий в наборе"
												}
											]
										},
										"description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
									},
									"response": []
								},
								{
									"name": "Изменение даты события на уже наступившую",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent( rnd.getEvent(category.id));\r",
													"        pm.collectionVariables.set(\"eid\", event.id)\r",
													"        pm.request.body.update({\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                eventDate : \"2020-10-11 23:10:05\"\r",
													"            }),\r",
													"            options: { raw: { language: 'json' } }\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										},
										"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
									},
									"response": []
								}
							]
						},
						{
							"name": "String length restrictions",
							"item": [
								{
									"name": "Изменение заголовка события с  title.length ＜ 3 (admin endpoint)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent( rnd.getEvent(category.id));\r",
													"        let event2 = rnd.getEvent(category.id)\r",
													"        event2.title = rnd.getWord(2);\r",
													"        pm.collectionVariables.set(\"eid\", event.id)\r",
													"        pm.request.body.update({\r",
													"            mode: 'raw',\r",
													"            raw: event2,\r",
													"            options: { raw: { language: 'json' } }\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										},
										"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
									},
									"response": []
								},
								{
									"name": "Изменение заголовка события с  title.length > 120 (admin endpoint)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent( rnd.getEvent(category.id));\r",
													"        let event2 = rnd.getEvent(category.id)\r",
													"        event2.title = rnd.getWord(121);\r",
													"        pm.collectionVariables.set(\"eid\", event.id)\r",
													"        pm.request.body.update({\r",
													"            mode: 'raw',\r",
													"            raw: event2,\r",
													"            options: { raw: { language: 'json' } }\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										},
										"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
									},
									"response": []
								},
								{
									"name": "Изменение описания события с  description.length ＜ 20 (admin endpoint)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent( rnd.getEvent(category.id));\r",
													"        let event2 = rnd.getEvent(category.id)\r",
													"        event2.description = rnd.getWord(19);\r",
													"        pm.collectionVariables.set(\"eid\", event.id)\r",
													"        pm.request.body.update({\r",
													"            mode: 'raw',\r",
													"            raw: event2,\r",
													"            options: { raw: { language: 'json' } }\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										},
										"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
									},
									"response": []
								},
								{
									"name": "Изменение описания события с description.length > 7000 (admin endpoint)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent( rnd.getEvent(category.id));\r",
													"        let event2 = rnd.getEvent(category.id)\r",
													"        event2.description = rnd.getWord(7001);\r",
													"        pm.collectionVariables.set(\"eid\", event.id)\r",
													"        pm.request.body.update({\r",
													"            mode: 'raw',\r",
													"            raw: event2,\r",
													"            options: { raw: { language: 'json' } }\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										},
										"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
									},
									"response": []
								},
								{
									"name": "Изменение аннотации события с annotation.length < 20 (admin endpoint)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent( rnd.getEvent(category.id));\r",
													"        let event2 = rnd.getEvent(category.id)\r",
													"        event2.annotation = rnd.getWord(19);\r",
													"        pm.collectionVariables.set(\"eid\", event.id)\r",
													"        pm.request.body.update({\r",
													"            mode: 'raw',\r",
													"            raw: event2,\r",
													"            options: { raw: { language: 'json' } }\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										},
										"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
									},
									"response": []
								},
								{
									"name": "Изменение аннотации события с annotation.length > 2000 (admin endpoint)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent( rnd.getEvent(category.id));\r",
													"        let event2 = rnd.getEvent(category.id)\r",
													"        event2.annotation = rnd.getWord(2001);\r",
													"        pm.collectionVariables.set(\"eid\", event.id)\r",
													"        pm.request.body.update({\r",
													"            mode: 'raw',\r",
													"            raw: event2,\r",
													"            options: { raw: { language: 'json' } }\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										},
										"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
									},
									"response": []
								},
								{
									"name": "Изменение события с description.length == 20 && annotation.length == 20 && title.length == 3 (admin endpoint)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent( rnd.getEvent(category.id));\r",
													"        let event2 = rnd.getEvent(category.id)\r",
													"        event2.annotation = rnd.getWord(20);\r",
													"        event2.description = rnd.getWord(20);\r",
													"        event2.title = rnd.getWord(3);\r",
													"        pm.collectionVariables.set(\"eid\", event.id)\r",
													"        pm.request.body.update({\r",
													"            mode: 'raw',\r",
													"            raw: event2,\r",
													"            options: { raw: { language: 'json' } }\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										},
										"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
									},
									"response": []
								},
								{
									"name": "Изменение события с description.length == 7000 && annotation.length == 2000 && title.length == 120 (admin endpoint)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent(rnd.getEvent(category.id));\r",
													"        let event2 = rnd.getEvent(category.id)\r",
													"        event2.annotation = rnd.getWord(2000);\r",
													"        event2.description = rnd.getWord(7000);\r",
													"        event2.title = rnd.getWord(120);\r",
													"        pm.collectionVariables.set(\"eid\", event.id)\r",
													"        pm.request.body.update({\r",
													"            mode: 'raw',\r",
													"            raw: event2,\r",
													"            options: { raw: { language: 'json' } }\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										},
										"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
									},
									"response": []
								}
							]
						},
						{
							"name": "Default values check",
							"item": [
								{
									"name": "Проверка на значения по-умолчанию from и size(event)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let user, category, eventArr;\r",
													"    try {\r",
													"        user = await api.addUser(rnd.getUser());\r",
													"        category = await api.addCategory(rnd.getCategory());\r",
													"        eventArr = Array.from({length:11}, () => rnd.getEvent(category.id));\r",
													"        for (let i = 0; i < 11; i++){\r",
													"            await api.addEvent(eventArr[i]);\r",
													"        }\r",
													"        pm.sendRequest({\r",
													"            url : pm.collectionVariables.get(\"baseUrl\")+\"/admin/events?from=0\",\r",
													"            method : \"GET\",\r",
													"            header: { \"Content-Type\": \"application/json\" , \r",
													"                \"Authorization\":\"Bearer \"+pm.collectionVariables.get(\"token\") }\r",
													"        }, (error, response) => {pm.collectionVariables.set('source', response.json())});\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const source = pm.collectionVariables.get('source');\r",
													"\r",
													"pm.test(\"Значение from по-умолчанию должно быть равным 0\", function () {\r",
													"    pm.expect(target[0].id).to.be.equal(source[0].id, 'Запросы с from=0 и без него должны начинаться с одного и того же события');\r",
													"});\r",
													"\r",
													"pm.test(\"Значение size по-умолчанию должно быть равным 10\", function () {\r",
													"    pm.expect(target.length).to.be.equal(10);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "0",
													"description": "список id пользователей, чьи события нужно найти",
													"disabled": true
												},
												{
													"key": "states",
													"value": "PUBLISHED",
													"description": "список состояний в которых находятся искомые события",
													"disabled": true
												},
												{
													"key": "categories",
													"value": "0",
													"description": "список id категорий в которых будет вестись поиск",
													"disabled": true
												},
												{
													"key": "rangeStart",
													"value": "2022-01-06%2013%3A30%3A38",
													"description": "дата и время не раньше которых должно произойти событие",
													"disabled": true
												},
												{
													"key": "rangeEnd",
													"value": "2097-09-06%2013%3A30%3A38",
													"description": "дата и время не позже которых должно произойти событие",
													"disabled": true
												},
												{
													"key": "from",
													"value": "0",
													"description": "количество событий, которые нужно пропустить для формирования текущего набора",
													"disabled": true
												},
												{
													"key": "size",
													"value": "1000",
													"description": "количество событий в наборе",
													"disabled": true
												}
											]
										},
										"description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
									},
									"response": []
								}
							]
						},
						{
							"name": "409",
							"item": [
								{
									"name": "Публикация уже опубликованного события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent( rnd.getEvent(category.id));\r",
													"        event = await api.publishEvent(event.id);\r",
													"        pm.collectionVariables.set(\"eid\", event.id)\r",
													"        pm.request.body.update({\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                stateAction : \"PUBLISH_EVENT\"\r",
													"            }),\r",
													"            options: { raw: { language: 'json' } }\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										},
										"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
									},
									"response": []
								},
								{
									"name": "Публикация отмененного события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent( rnd.getEvent(category.id));\r",
													"        event = await api.rejectEvent(event.id);\r",
													"        pm.collectionVariables.set(\"eid\", event.id)\r",
													"        pm.request.body.update({\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                stateAction : \"PUBLISH_EVENT\"\r",
													"            }),\r",
													"            options: { raw: { language: 'json' } }\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										},
										"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
									},
									"response": []
								},
								{
									"name": "Отмена опубликованного события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent( rnd.getEvent(category.id));\r",
													"        event = await api.publishEvent(event.id);\r",
													"        pm.collectionVariables.set(\"eid\", event.id)\r",
													"        pm.request.body.update({\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                stateAction : \"REJECT_EVENT\"\r",
													"            }),\r",
													"            options: { raw: { language: 'json' } }\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										},
										"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Редактирование данных события и его статуса (отклонение/публикация).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent( rnd.getEvent(category.id));\r",
									"        let event2 = rnd.getEvent(category.id)\r",
									"        event2.stateAction = \"PUBLISH_EVENT\"\r",
									"        pm.collectionVariables.set('response', event2);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: event2,\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('publishedOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
									"    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость события должна соответствовать искомому событию');\r",
									"    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать искомому событию');\r",
									"    pm.expect(source.description).equal(target.description, 'Описание события должно соответствовать искомому событию');\r",
									"    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать искомому событию');\r",
									"    pm.expect(source.participantLimit.toString()).equal(target.participantLimit.toString(), 'Лимит участников события должен соответствовать искомому событию');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Required) id события"
								}
							]
						},
						"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
					},
					"response": []
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Validtion",
					"item": [
						{
							"name": "Required params in body",
							"item": [
								{
									"name": "Добавление категории с именем, состоящим из пробелов",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let category;\r",
													"    try {\r",
													"        category = {name: '   '};\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(category),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление категории с пустым полем name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let category;\r",
													"    try {\r",
													"        category = {name: ''};\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(category),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление категории без поля name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let category;\r",
													"    try {\r",
													"        category = {};\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(category),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Misc tests",
							"item": [
								{
									"name": "Изменение категории с неизменными данными",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"    let category, categoryObj\r",
													"    try {\r",
													"        category = rnd.getCategory();\r",
													"        categoryObj = await api.addCategory(category);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"    pm.collectionVariables.set(\"catid\", Number(categoryObj.id))\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(category),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const source = JSON.parse(pm.request.body.raw);\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
													"pm.expect(target).to.have.property('id');\r",
													"pm.expect(target).to.have.property('name');\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
													"    pm.expect(target.id).to.not.be.null;\r",
													"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories/:catId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories",
												":catId"
											],
											"variable": [
												{
													"key": "catId",
													"value": "{{catid}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "String length restrictions",
							"item": [
								{
									"name": "Добавление новой категории с name.length > 50",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let category;\r",
													"    try {\r",
													"        category = {'name': rnd.getWord(51)};\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(category),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										},
										"description": "Обратите внимание: имя категории должно быть уникальным"
									},
									"response": []
								},
								{
									"name": "Добавление новой категории с name.length == 50",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let category;\r",
													"    try {\r",
													"        category = {'name': rnd.getWord(50)};\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(category),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										},
										"description": "Обратите внимание: имя категории должно быть уникальным"
									},
									"response": []
								},
								{
									"name": "Изменение имени категории с name.length > 50",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"    let category\r",
													"    try {\r",
													"        category = await api.addCategory(rnd.getCategory());\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"    pm.collectionVariables.set(\"catid\", Number(category.id))\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            name : rnd.getWord(51)\r",
													"        }),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories/:catId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories",
												":catId"
											],
											"variable": [
												{
													"key": "catId",
													"value": "{{catid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Изменение имени категории с name.length == 50",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"    let category\r",
													"    try {\r",
													"        category = await api.addCategory(rnd.getCategory());\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"    pm.collectionVariables.set(\"catid\", Number(category.id))\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            name : rnd.getWord(50)\r",
													"        }),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories/:catId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories",
												":catId"
											],
											"variable": [
												{
													"key": "catId",
													"value": "{{catid}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "409",
							"item": [
								{
									"name": "Попытка изменения имени категории на уже существующее",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"    let category1, category2\r",
													"    try {\r",
													"        category1 = await api.addCategory(rnd.getCategory());\r",
													"        category2 = await api.addCategory(rnd.getCategory());\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"    pm.collectionVariables.set(\"catid\", category2.id)\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            name : category1.name\r",
													"        }),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories/:catId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories",
												":catId"
											],
											"variable": [
												{
													"key": "catId",
													"value": "{{catid}}"
												}
											]
										},
										"description": "Обратите внимание: имя категории должно быть уникальным"
									},
									"response": []
								},
								{
									"name": "Добавление новой категории с занятым именем",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let category;\r",
													"    try {\r",
													"        category = rnd.getCategory();\r",
													"        await api.addCategory(category);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(category),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										},
										"description": "Обратите внимание: имя категории должно быть уникальным"
									},
									"response": []
								},
								{
									"name": "Удаление категории с привязанными событиями",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent( rnd.getEvent(category.id));\r",
													"        pm.collectionVariables.set('catid', category.id);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/categories/:catId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories",
												":catId"
											],
											"variable": [
												{
													"key": "catId",
													"value": "{{catid}}"
												}
											]
										},
										"description": "Обратите внимание: с категорий не должно быть связано ни одного события."
									},
									"response": []
								},
								{
									"name": "Изменение имени категории на уже занятое",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"    let category1, category2\r",
													"    try {\r",
													"        category1 = await api.addCategory(rnd.getCategory());\r",
													"        category2 = await api.addCategory(rnd.getCategory());\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"    pm.collectionVariables.set(\"catid\", Number(category1.id))\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            name : category2.name\r",
													"        }),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories/:catId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories",
												":catId"
											],
											"variable": [
												{
													"key": "catId",
													"value": "{{catid}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Добавление новой категории",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let category;\r",
									"    try {\r",
									"        category = rnd.getCategory();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(category),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						},
						"description": "Обратите внимание: имя категории должно быть уникальным"
					},
					"response": []
				},
				{
					"name": "Удаление категории",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const findedCategory = await api.findCategory(category.id);\r",
									"        pm.collectionVariables.set(\"catid\", category.id)\r",
									"        pm.collectionVariables.set(\"response\", findedCategory)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"source = pm.collectionVariables.get('response');\r",
									"catId = pm.collectionVariables.get('catid');\r",
									"\r",
									"pm.test(\"Категория должна быть найдена до удаления\", function () {\r",
									"    pm.expect(source.id).equal(catId, 'Идентификтор категории должен совпадать с удаляемым');\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/categories/\" + catId,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Категория не должна быть найдена после удаления\", function () {\r",
									"                pm.expect(response.code).to.eql(404);\r",
									"            });\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/categories/:catId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories",
								":catId"
							],
							"variable": [
								{
									"key": "catId",
									"value": "{{catid}}"
								}
							]
						},
						"description": "Обратите внимание: с категорий не должно быть связано ни одного события."
					},
					"response": []
				},
				{
					"name": "Изменение категории",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let category\r",
									"    try {\r",
									"        category = await api.addCategory(rnd.getCategory());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"catid\", Number(category.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            name : rnd.getCategory().name\r",
									"        }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories/:catId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories",
								":catId"
							],
							"variable": [
								{
									"key": "catId",
									"value": "{{catid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compilation",
			"item": [
				{
					"name": "admin",
					"item": [
						{
							"name": "Добавление новой подборки",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(rnd.getEvent(category.id));\r",
											"        compilation = rnd.getCompilation(event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(compilation),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Подборка должны содержать поля: id, title, pinned, events\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('pinned');\r",
											"pm.expect(target).to.have.property('events');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).to.be.a(\"string\");\r",
											"    pm.expect(target.events).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(source.events[0]).equal(target.events[0].id, 'Идентификаторы событий в подборке должен быть идентичен идентификаторам, указанным при создании подборки ');\r",
											"    pm.expect(source.title).equal(target.title, 'Название подборки должно соответствовать указанному при создании');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/compilations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"compilations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление подборки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"let source = pm.collectionVariables.get('response');\r",
											"console.log(\"--source\")\r",
											"console.log(source)\r",
											"\r",
											"pm.test(\"Подборка должна быть найдена до удаления\", function () {\r",
											"    pm.expect(source).not.to.be.null;\r",
											"});\r",
											"\r",
											"let body\r",
											"const req = {\r",
											"                url :pm.collectionVariables.get(\"baseUrl\") + \"/compilations?from=0&size=1000\" ,\r",
											"                method: \"GET\",\r",
											"                body: body == null ? \"\" : JSON.stringify(body),\r",
											"                header: { \"Content-Type\": \"application/json\" ,\r",
											"                \"Authorization\":\"Bearer \"+pm.collectionVariables.get(\"token\")},\r",
											"            };\r",
											"\r",
											"pm.sendRequest(req, (error, response) => {\r",
											"    console.log(response)\r",
											"    pm.test(\"Подборка должна быть удалена после выполнения запроса\", function(){\r",
											"        response.json().forEach(element => {\r",
											"            if(element.id == pm.collectionVariables.get('compid')){\r",
											"                throw new Error(\"Подборка все еще находится в списке существующих\");\r",
											"            }\r",
											"        })\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const compilation = await api.addCompilation(rnd.getCompilation());\r",
											"        console.log(compilation)\r",
											"        const foundedCompilation = await api.findCompilation(compilation.id);\r",
											"        console.log(foundedCompilation)\r",
											"        pm.collectionVariables.set('compid', compilation.id);\r",
											"        pm.collectionVariables.set('response', foundedCompilation);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/compilations/:compId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"compilations",
										":compId"
									],
									"variable": [
										{
											"key": "compId",
											"value": "{{compid}}",
											"description": "(Required) id подборки"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновить информацию о подборке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"      \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        const compilation = await api.addCompilation(rnd.getCompilation());\r",
											"        const foundedCompilation = await api.findCompilation(compilation.id);\r",
											"        pm.collectionVariables.set('compid', compilation.id);\r",
											"        pm.collectionVariables.set('response', foundedCompilation);\r",
											"        pm.collectionVariables.set('eid', event.id);\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                events : [event.id],\r",
											"                pinned: true,\r",
											"                title: rnd.getCompilation().name\r",
											"            }),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"});\r",
											"\r",
											"source = pm.collectionVariables.get('response');\r",
											"compId = pm.collectionVariables.get('compid');\r",
											"eventId = pm.collectionVariables.get('eid');\r",
											"\r",
											"pm.test(\"Событие не должно быть найдено в подборке до добавления\", function () {\r",
											"    pm.expect(source.events.length).equal(0);\r",
											"});\r",
											"\r",
											"pm.sendRequest({\r",
											"            url: pm.collectionVariables.get(\"baseUrl\") + \"/compilations/\" + compId,\r",
											"            method: 'GET',\r",
											"        }, (error, response) => {\r",
											"            \r",
											"            pm.test(\"Событие должно быть найдено в подборке после добавления\", function () {\r",
											"                pm.expect(response.json().events[0].id).equal(eventId);\r",
											"            });\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{baseUrl}}/admin/compilations/:compId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"compilations",
										":compId"
									],
									"variable": [
										{
											"key": "compId",
											"value": "{{compid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Validation",
					"item": [
						{
							"name": "Unreqired params in body",
							"item": [
								{
									"name": "Добавление новой подборки без параметра pinned",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let compilation;\r",
													"    try {\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent( rnd.getEvent(category.id));\r",
													"        compilation = rnd.getCompilation(event.id);\r",
													"        delete compilation['pinned'];\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(compilation),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const source = JSON.parse(pm.request.body.raw);\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Подборка должны содержать поля: id, title, pinned, events\", function () {\r",
													"pm.expect(target).to.have.property('id');\r",
													"pm.expect(target).to.have.property('title');\r",
													"pm.expect(target).to.have.property('pinned');\r",
													"pm.expect(target).to.have.property('events');\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
													"    pm.expect(target.id).to.not.be.null;\r",
													"    pm.expect(target.title).to.be.a(\"string\");\r",
													"    pm.expect(target.events).to.be.an(\"array\");\r",
													"    pm.expect(target.pinned).equal(false);\r",
													"\r",
													"    pm.expect(source.events[0]).equal(target.events[0].id, 'Идентификаторы событий в подборке должен быть идентичен идентификаторам, указанным при создании подборки ');\r",
													"    pm.expect(source.title).equal(target.title, 'Название подборки должно соответствовать указанному при создании');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Required params in body",
							"item": [
								{
									"name": "Добавление подборки без поля title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let compilation;\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        compilation = {\r",
													"            \"pinned\":\"true\"};\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(compilation),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление подборки с пустым полем title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let compilation;\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        compilation = {\r",
													"            \"pinned\":\"true\",\r",
													"            \"title\": \"\"};\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(compilation),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление подборки с пустой строкой в качестве названия",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let compilation;\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        compilation = {\r",
													"            \"pinned\":\"true\",\r",
													"            \"title\": \"    \"};\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(compilation),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Misc tests",
							"item": [
								{
									"name": "Добавление подборки с проверкой связей многие-ко-многим",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let compilation;\r",
													"    let compilation2;\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent( rnd.getEvent(category.id));\r",
													"        const event2 = await api.addEvent( rnd.getEvent(category.id));\r",
													"        compilation = rnd.getCompilation(event.id, event2.id);\r",
													"        compilation2 = rnd.getCompilation(event.id, event2.id);\r",
													"        pm.sendRequest({\r",
													"            url : \"http://localhost:8080/admin/compilations/\",\r",
													"            method : \"POST\",\r",
													"            header: { \"Content-Type\": \"application/json\" ,\r",
													"                \"Authorization\":\"Bearer \"+pm.collectionVariables.get(\"token\") },\r",
													"            body: JSON.stringify({\r",
													"                events: compilation2.events,\r",
													"                title: compilation2.title\r",
													"            })\r",
													"        }, (error, response) => {\r",
													"\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(compilation),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const source = JSON.parse(pm.request.body.raw);\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Подборка должны содержать поля: id, title, pinned, events\", function () {\r",
													"pm.expect(target).to.have.property('id');\r",
													"pm.expect(target).to.have.property('title');\r",
													"pm.expect(target).to.have.property('pinned');\r",
													"pm.expect(target).to.have.property('events');\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
													"    pm.expect(target.id).to.not.be.null;\r",
													"    pm.expect(target.title).to.be.a(\"string\");\r",
													"    pm.expect(target.events).to.be.an(\"array\");\r",
													"    if (target.events[0].id < target.events[1].id){\r",
													"        pm.expect(source.events[0]).equal(target.events[0].id, 'Идентификаторы событий в подборке должен быть идентичен идентификаторам, указанным при создании подборки ');\r",
													"    } else {\r",
													"        pm.expect(source.events[0]).equal(target.events[1].id, 'Идентификаторы событий в подборке должен быть идентичен идентификаторам, указанным при создании подборки ');\r",
													"    }\r",
													"    pm.expect(source.title).equal(target.title, 'Название подборки должно соответствовать указанному при создании');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление подборки без событий",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let compilation;\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        compilation = rnd.getCompilation();\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(compilation),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const source = JSON.parse(pm.request.body.raw);\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Подборка должны содержать поля: id, title, pinned, events\", function () {\r",
													"    pm.expect(target).to.have.property('id');\r",
													"    pm.expect(target).to.have.property('title');\r",
													"    pm.expect(target).to.have.property('pinned');\r",
													"    pm.expect(target).to.have.property('events');\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
													"    pm.expect(target.id).to.not.be.null;\r",
													"    pm.expect(target.title).to.be.a(\"string\");\r",
													"    pm.expect(target.events).to.be.an(\"array\");\r",
													"\r",
													"    pm.expect(source.title).equal(target.title, 'Название подборки должно соответствовать указанному при создании');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "String length restrictions",
							"item": [
								{
									"name": "Добавление подборки с title.length > 50",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let compilation;\r",
													"    try {\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({title: rnd.getWord(51)}),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление подборки с title.length == 50",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let compilation;\r",
													"    try {\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({title: rnd.getWord(50)}),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Обновить названия подборки с title.length > 50",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const compilation = await api.addCompilation(rnd.getCompilation());\r",
													"        pm.collectionVariables.set('compid', compilation.id);\r",
													"        pm.request.body.update({\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                title: rnd.getWord(51)\r",
													"            }),\r",
													"            options: { raw: { language: 'json' } }\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "{{compid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Обновить названия подборки с title.length == 50",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const compilation = await api.addCompilation(rnd.getCompilation());\r",
													"        pm.collectionVariables.set('compid', compilation.id);\r",
													"        pm.request.body.update({\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                title: rnd.getWord(50)\r",
													"            }),\r",
													"            options: { raw: { language: 'json' } }\r",
													"        });\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "{{compid}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Default values check",
							"item": [
								{
									"name": "Добавление подборки без pinned",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let cArr = Array.from({length: 10}, () => rnd.getCompilation());\r",
													"    let responseArr = [];\r",
													"    try {\r",
													"        cArr.forEach(function(x){ delete x.pinned });\r",
													"        for (const c of cArr){\r",
													"            responseArr.push(await api.addCompilation(c));\r",
													"        }\r",
													"        pm.collectionVariables.set('responseArr', responseArr);\r",
													"        compilation = rnd.getCompilation();\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(compilation),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const source = pm.collectionVariables.get('responseArr');\r",
													"\r",
													"\r",
													"pm.test(\"У каждой из созданных подборок pinned должно принять значение по умолчанию(false)\", function () {\r",
													"    source.forEach(function(x){pm.expect(x.pinned).to.be.equal(false)});\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    //\"http://localhost:8765\"",
					"    constructor(postman, verbose = false, baseUrl = pm.collectionVariables.get(\"baseUrl\")) {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"",
					"    async changeSubsMode(userID,mode, verbose=null) {",
					"        return this.patch(\"/users/\"+userID+\"/subs?auto=\"+mode, null, \"Ошибка при добавлении Запроса на дружбу: \", verbose);",
					"    }",
					"",
					"    async addSub(userId,friendId, verbose=null) {",
					"        return this.post(\"/users/\"+userId+\"/friendships/\"+friendId, null, \"Ошибка при добавлении Запроса на дружбу: \", verbose);",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(event, verbose=null) {",
					"        return this.post(\"/users/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId,  verbose=null) {",
					"        return this.post('/users/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId,  reqId, verbose=null) {",
					"        return this.patch('/users/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\",",
					"                \"Authorization\":\"Bearer \"+pm.collectionVariables.get(\"token\")",
					"                 },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}'),",
					"            password: pm.variables.replaceIn('{{$randomPassword}}')",
					"",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8765",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJLRmFtc0ktUl9MTmhDOHBiQmVSaWRma1lBc0pfYVg1ZmI3VmQ2ODBBVFlBIn0.eyJleHAiOjE2OTUxMjE3NTgsImlhdCI6MTY5NTEyMTQ1OCwiYXV0aF90aW1lIjoxNjk1MTE5MzM2LCJqdGkiOiIzNThjYzhjNS1iY2ViLTQyMmItYjMzOC03OGFjZWMwNTk5MmQiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgxODEvcmVhbG1zL2V3bS1hcHAtcmVhbG0iLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiZjJkZWQ2YmMtZTJmNy00MjJiLTkwYTYtYjk5OWZhZjA5MGMwIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiZXdtLWFwcC1jbGllbnQiLCJzZXNzaW9uX3N0YXRlIjoiNjRiYmY0YzYtNjNlMy00YjVhLTkxMDQtMmQ5MmI3MzRmMzdmIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyIvKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1ld20tYXBwLXJlYWxtIiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsInVzZXIiXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwic2lkIjoiNjRiYmY0YzYtNjNlMy00YjVhLTkxMDQtMmQ5MmI3MzRmMzdmIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyIiwiZ2l2ZW5fbmFtZSI6IiIsImZhbWlseV9uYW1lIjoiIiwiZW1haWwiOiJ1c2VyQGVtYWlsLnJ1In0.KBSku49ssXWsALgKxzQv208DVcaie7XWVBOIYhZifMrP6T0rA1Bk1mMWZqaSuDTYnErRYQMsa-RUUx_vb8n_Iz-D-6ClwVVhJJzIBxJKRlqxxm_eXH_-jUezqpj77QRe92CXVwzWbhIPzndt_aM6lt9gUFigYJ34B5b_rKNOp0kGVUmTGvFEhtmh9KfzIiIRDPX7CuFd3pzU-Lls8_6jogCQObC4D5hdTs1RTgxyfvbe-eXTR3-k8HkBlnSdZH6MigNxXqwYNKvAh3eD9DVVyBos3mn0KEkl4h-5ZrfscY1pquMZVlqQph8RHx6iZEczxkZOtX2irQ990ebWzKZqPA",
			"type": "string"
		}
	]
}